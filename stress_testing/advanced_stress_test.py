#!/usr/bin/env python3
"""
Sistema Avan√ßado de Teste de Estresse para GestokPro
Inclui testes mais sofisticados e relat√≥rios com gr√°ficos
"""

import asyncio
import aiohttp
import time
import json
import random
import statistics
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
import threading
import os
import sys

# Adiciona o diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from test_stress import GestokProStressTester

class AdvancedGestokProTester(GestokProStressTester):
    def __init__(self, base_url="http://localhost:5000"):
        super().__init__(base_url)
        self.memory_snapshots = []
        self.cpu_usage = []
        self.concurrent_users = []
        
    async def simulate_realistic_user(self, session_id, behavior_type="normal"):
        """Simula comportamento mais realista de usu√°rio"""
        async with aiohttp.ClientSession() as session:
            # Login
            login_success = await self.login_user(session)
            if not login_success:
                return
                
            if behavior_type == "heavy":
                # Usu√°rio pesado - faz muitas opera√ß√µes
                operations = [
                    ('/dashboard', 'GET', 'Dashboard'),
                    ('/produtos', 'GET', 'Lista Produtos'),
                    ('/produtos?search=notebook', 'GET', 'Busca Notebook'),
                    ('/produtos?search=mouse', 'GET', 'Busca Mouse'),
                    ('/produtos?page=1', 'GET', 'P√°gina 1'),
                    ('/produtos?page=2', 'GET', 'P√°gina 2'),
                    ('/produtos/novo', 'GET', 'Novo Produto'),
                    ('/produtos', 'GET', 'Lista Produtos 2'),
                    ('/dashboard', 'GET', 'Dashboard 2'),
                ]
                delay_between_ops = 0.1
                
            elif behavior_type == "fast":
                # Usu√°rio r√°pido - navega rapidamente
                operations = [
                    ('/dashboard', 'GET', 'Dashboard'),
                    ('/produtos', 'GET', 'Lista Produtos'),
                    ('/produtos/novo', 'GET', 'Novo Produto'),
                ]
                delay_between_ops = 0.05
                
            else:  # normal
                # Usu√°rio normal
                operations = [
                    ('/dashboard', 'GET', 'Dashboard'),
                    ('/produtos', 'GET', 'Lista Produtos'),
                    ('/produtos?search=' + random.choice(['notebook', 'mouse', 'monitor']), 'GET', 'Busca'),
                    ('/produtos?page=1', 'GET', 'Pagina√ß√£o'),
                    ('/produtos/novo', 'GET', 'Formul√°rio'),
                ]
                delay_between_ops = 0.2
            
            # Executa opera√ß√µes
            for endpoint, method, description in operations:
                await self.test_endpoint(
                    session, method, endpoint, 
                    description=f"{description} - {behavior_type.title()} User {session_id}"
                )
                await asyncio.sleep(delay_between_ops)
    
    async def run_mixed_load_test(self, duration_seconds=60):
        """Executa teste com diferentes tipos de carga"""
        print(f"üöÄ Iniciando teste de carga mista...")
        print(f"üìä Dura√ß√£o: {duration_seconds}s")
        print("-" * 60)
        
        start_time = time.time()
        wave = 1
        
        while time.time() - start_time < duration_seconds:
            # Mistura diferentes tipos de usu√°rios
            user_types = ['normal'] * 2 + ['heavy'] * 1 + ['fast'] * 1
            random.shuffle(user_types)
            
            print(f"üåä Onda {wave} - Usu√°rios: {', '.join(user_types)}")
            
            # Cria tasks para diferentes tipos de usu√°rios
            tasks = []
            for i, user_type in enumerate(user_types):
                session_id = f"{wave}-{i+1}"
                task = asyncio.create_task(
                    self.simulate_realistic_user(session_id, user_type)
                )
                tasks.append(task)
            
            # Executa usu√°rios simultaneamente
            await asyncio.gather(*tasks, return_exceptions=True)
            
            wave += 1
            await asyncio.sleep(random.uniform(1, 3))  # Pausa vari√°vel entre ondas
            
        print(f"‚úÖ Teste de carga mista conclu√≠do!")
        print(f"üìà Total de requests: {len(self.results)}")
    
    def generate_advanced_report(self):
        """Gera relat√≥rio avan√ßado com mais an√°lises"""
        if not self.results:
            print("‚ùå Nenhum resultado dispon√≠vel")
            return
            
        # An√°lise temporal
        results_by_time = {}
        for result in self.results:
            timestamp = datetime.fromisoformat(result['timestamp'])
            time_bucket = timestamp.replace(second=0, microsecond=0)  # Agrupa por minuto
            
            if time_bucket not in results_by_time:
                results_by_time[time_bucket] = []
            results_by_time[time_bucket].append(result['response_time_ms'])
        
        # Calcula throughput por minuto
        throughput_data = []
        for time_bucket, response_times in sorted(results_by_time.items()):
            throughput_data.append({
                'time': time_bucket.strftime('%H:%M'),
                'requests_per_minute': len(response_times),
                'avg_response_time': statistics.mean(response_times),
                'max_response_time': max(response_times)
            })
        
        # An√°lise de percentis mais detalhada
        response_times = [r['response_time_ms'] for r in self.results]
        response_times.sort()
        
        percentiles = {}
        for p in [10, 25, 50, 75, 80, 85, 90, 95, 99, 99.9]:
            if len(response_times) > 0:
                index = int(len(response_times) * (p / 100.0))
                if index >= len(response_times):
                    index = len(response_times) - 1
                percentiles[f'P{p}'] = response_times[index]
        
        # Detec√ß√£o de anomalias
        mean_time = statistics.mean(response_times)
        std_dev = statistics.stdev(response_times) if len(response_times) > 1 else 0
        threshold = mean_time + (2 * std_dev)  # 2 desvios padr√£o
        
        anomalies = [r for r in self.results if r['response_time_ms'] > threshold]
        
        # Gera relat√≥rio
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"advanced_stress_report_{timestamp}.md"
        
        report_content = f"""# Relat√≥rio Avan√ßado de Teste de Estresse - GestokPro

**Data/Hora:** {datetime.now().strftime("%d/%m/%Y √†s %H:%M:%S")}  
**URL Testada:** {self.base_url}  
**Tipo de Teste:** Carga Mista (Usu√°rios Normal, Pesado e R√°pido)

## üìä Resumo Executivo

### Indicadores Chave de Performance (KPIs)
- **Total de Requests:** {len(self.results)}
- **Taxa de Sucesso:** {len([r for r in self.results if r['success']])/len(self.results)*100:.1f}%
- **Tempo de Resposta M√©dio:** {statistics.mean(response_times):.2f} ms
- **Throughput M√©dio:** {len(self.results) / ((max([datetime.fromisoformat(r['timestamp']) for r in self.results]) - min([datetime.fromisoformat(r['timestamp']) for r in self.results])).total_seconds() / 60):.1f} req/min

### Classifica√ß√£o de Performance
"""
        
        avg_time = statistics.mean(response_times)
        if avg_time < 200:
            performance_grade = "üü¢ EXCELENTE"
            performance_desc = "Sistema operando com performance √≥tima"
        elif avg_time < 500:
            performance_grade = "üü° BOM"
            performance_desc = "Performance aceit√°vel, monitoramento recomendado"
        elif avg_time < 1000:
            performance_grade = "üü† ATEN√á√ÉO"
            performance_desc = "Performance degradada, otimiza√ß√£o necess√°ria"
        else:
            performance_grade = "üî¥ CR√çTICO"
            performance_desc = "Performance inaceit√°vel, a√ß√£o imediata necess√°ria"
            
        report_content += f"**Status:** {performance_grade}  \n**Avalia√ß√£o:** {performance_desc}\n\n"
        
        # Percentis detalhados
        report_content += f"""## üìà An√°lise de Percentis de Lat√™ncia

| Percentil | Tempo de Resposta |
|-----------|-------------------|
"""
        for percentil, valor in percentiles.items():
            report_content += f"| {percentil} | {valor:.2f} ms |\n"
        
        # Throughput por tempo
        report_content += f"""
## ‚ö° An√°lise de Throughput

| Hor√°rio | Req/min | Tempo M√©dio | Tempo M√°ximo |
|---------|---------|-------------|--------------|
"""
        for data in throughput_data:
            report_content += f"| {data['time']} | {data['requests_per_minute']} | {data['avg_response_time']:.1f} ms | {data['max_response_time']:.1f} ms |\n"
        
        # Anomalias
        if anomalies:
            report_content += f"""
## üö® Detec√ß√£o de Anomalias

Foram detectados **{len(anomalies)}** requests com tempo de resposta an√¥malo (>{threshold:.1f} ms):

"""
            for anomaly in anomalies[-5:]:  # √öltimas 5 anomalias
                report_content += f"- {anomaly['endpoint']} - {anomaly['response_time_ms']:.1f} ms ({anomaly['timestamp']})\n"
        
        # An√°lise de padr√µes
        report_content += f"""
## üîç An√°lise de Padr√µes de Uso

### Endpoints Mais Acessados
"""
        endpoint_counts = {}
        for result in self.results:
            endpoint = result['endpoint']
            endpoint_counts[endpoint] = endpoint_counts.get(endpoint, 0) + 1
        
        for endpoint, count in sorted(endpoint_counts.items(), key=lambda x: x[1], reverse=True)[:5]:
            percentage = (count / len(self.results)) * 100
            report_content += f"- **{endpoint}**: {count} requests ({percentage:.1f}%)\n"
        
        # Recomenda√ß√µes baseadas nos dados
        report_content += f"""
## üí° Recomenda√ß√µes de Otimiza√ß√£o

"""
        
        if avg_time > 1000:
            report_content += "### üî¥ A√ß√µes Cr√≠ticas\n"
            report_content += "- Implementar cache de consultas ao banco de dados\n"
            report_content += "- Otimizar queries SQL mais lentas\n"
            report_content += "- Considerar implementar pagina√ß√£o mais eficiente\n"
            report_content += "- Revisar √≠ndices do banco de dados\n\n"
        
        if len(anomalies) > len(self.results) * 0.05:  # Mais de 5% de anomalias
            report_content += "### üü† Estabilidade\n"
            report_content += "- Investigar picos de lat√™ncia\n"
            report_content += "- Implementar circuit breakers\n"
            report_content += "- Configurar alertas de performance\n\n"
        
        # Endpoints que precisam de otimiza√ß√£o
        slow_endpoints = []
        endpoint_stats = {}
        for result in self.results:
            endpoint = result['endpoint']
            if endpoint not in endpoint_stats:
                endpoint_stats[endpoint] = []
            endpoint_stats[endpoint].append(result['response_time_ms'])
        
        for endpoint, times in endpoint_stats.items():
            avg_endpoint_time = statistics.mean(times)
            if avg_endpoint_time > 500:  # Endpoints com mais de 500ms
                slow_endpoints.append((endpoint, avg_endpoint_time))
        
        if slow_endpoints:
            report_content += "### üîß Endpoints para Otimiza√ß√£o\n"
            for endpoint, avg_time in sorted(slow_endpoints, key=lambda x: x[1], reverse=True):
                report_content += f"- **{endpoint}**: {avg_time:.1f} ms m√©dio\n"
        
        report_content += f"""
## üìä Dados T√©cnicos Detalhados

### Distribui√ß√£o de Status Codes
"""
        status_codes = {}
        for result in self.results:
            code = result['status_code']
            status_codes[code] = status_codes.get(code, 0) + 1
        
        for code, count in sorted(status_codes.items()):
            percentage = (count / len(self.results)) * 100
            report_content += f"- **{code}**: {count} requests ({percentage:.1f}%)\n"
        
        report_content += f"""
### M√©tricas de Confiabilidade
- **MTTR (Mean Time To Respond)**: {statistics.mean(response_times):.2f} ms
- **Desvio Padr√£o**: {std_dev:.2f} ms
- **Coeficiente de Varia√ß√£o**: {(std_dev/statistics.mean(response_times))*100:.1f}%
- **Requests com Erro**: {len([r for r in self.results if not r['success']])}
- **Uptime**: {len([r for r in self.results if r['success']])/len(self.results)*100:.2f}%

---
*Relat√≥rio gerado automaticamente pelo Sistema Avan√ßado de Teste de Estresse*  
*Vers√£o: 2.0 | Data: {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}*
"""
        
        # Salva o relat√≥rio
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
            
        print(f"üìÑ Relat√≥rio avan√ßado salvo: {report_filename}")
        
        # Exibe resumo no console
        print("\n" + "="*70)
        print("üéØ RELAT√ìRIO AVAN√áADO DE TESTE DE ESTRESSE")
        print("="*70)
        print(f"Status de Performance: {performance_grade}")
        print(f"Total de Requests: {len(self.results)}")
        print(f"Taxa de Sucesso: {len([r for r in self.results if r['success']])/len(self.results)*100:.1f}%")
        print(f"Tempo M√©dio: {avg_time:.2f} ms")
        print(f"P95: {percentiles.get('P95', 0):.2f} ms")
        print(f"P99: {percentiles.get('P99', 0):.2f} ms")
        print(f"Anomalias Detectadas: {len(anomalies)}")
        print(f"Endpoints Lentos: {len(slow_endpoints)}")
        print("="*70)
        
        return report_filename

async def main():
    """Executa teste avan√ßado"""
    print("üß™ GestokPro - Sistema Avan√ßado de Teste de Estresse")
    print("=" * 60)
    
    # Configura√ß√µes do teste
    BASE_URL = "http://localhost:5000"
    DURATION = 45  # segundos
    
    # Cria testador avan√ßado
    tester = AdvancedGestokProTester(base_url=BASE_URL)
    
    # Executa teste de carga mista
    await tester.run_mixed_load_test(duration_seconds=DURATION)
    
    # Gera relat√≥rio avan√ßado
    report_file = tester.generate_advanced_report()
    
    print(f"\nüéâ Teste avan√ßado conclu√≠do!")
    print(f"üìä Relat√≥rio detalhado: {report_file}")

if __name__ == "__main__":
    asyncio.run(main())